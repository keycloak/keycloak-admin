// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FormAccess /> render normal form 1`] = `
<Form
  realm="master"
>
  <AccessContextProvider>
    <FormAccess
      role="manage-clients"
    >
      <Form
        className="keycloak__form "
      >
        <form
          className="pf-c-form keycloak__form "
          noValidate={true}
        >
          <FormGroup
            fieldId="field"
            key=".0"
            label="test"
          >
            <div
              className="pf-c-form__group"
            >
              <div
                className="pf-c-form__group-label"
              >
                <label
                  className="pf-c-form__label"
                  htmlFor="field"
                >
                  <span
                    className="pf-c-form__label-text"
                  >
                    test
                  </span>
                </label>
                 
              </div>
              <div
                className="pf-c-form__group-control"
              >
                <TextInput
                  id="field"
                  key=".0"
                  name="fieldName"
                  type="text"
                >
                  <TextInputBase
                    aria-label={null}
                    className=""
                    id="field"
                    innerRef={[Function]}
                    isDisabled={false}
                    isLeftTruncated={false}
                    isReadOnly={false}
                    isRequired={false}
                    name="fieldName"
                    onChange={[Function]}
                    type="text"
                    validated="default"
                  >
                    <input
                      aria-invalid={false}
                      aria-label={null}
                      className="pf-c-form-control"
                      disabled={false}
                      id="field"
                      name="fieldName"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      readOnly={false}
                      required={false}
                      type="text"
                    />
                  </TextInputBase>
                </TextInput>
              </div>
            </div>
          </FormGroup>
          <Controller
            control={
              Object {
                "defaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldArrayDefaultValuesRef": Object {
                  "current": Object {},
                },
                "fieldArrayNamesRef": Object {
                  "current": Set {},
                },
                "fieldArrayValuesRef": Object {
                  "current": Object {},
                },
                "fieldsRef": Object {
                  "current": Object {
                    "consentRequired": Object {
                      "ref": Object {
                        "focus": [Function],
                        "name": "consentRequired",
                      },
                    },
                    "fieldName": Object {
                      "ref": <input
                        aria-invalid="false"
                        class="pf-c-form-control"
                        id="field"
                        name="fieldName"
                        type="text"
                        value=""
                      />,
                    },
                  },
                },
                "fieldsWithValidationRef": Object {
                  "current": Object {},
                },
                "formState": Object {
                  "dirtyFields": Object {},
                  "errors": Object {},
                  "isDirty": false,
                  "isSubmitSuccessful": false,
                  "isSubmitted": false,
                  "isSubmitting": false,
                  "isValid": false,
                  "isValidating": false,
                  "submitCount": 0,
                  "touched": Object {},
                },
                "formStateRef": Object {
                  "current": Object {
                    "dirtyFields": Object {},
                    "errors": Object {},
                    "isDirty": false,
                    "isSubmitSuccessful": false,
                    "isSubmitted": false,
                    "isSubmitting": false,
                    "isValid": false,
                    "isValidating": false,
                    "submitCount": 0,
                    "touched": Object {},
                  },
                },
                "getValues": [Function],
                "isFormDirty": [Function],
                "mode": Object {
                  "isOnAll": false,
                  "isOnBlur": false,
                  "isOnChange": false,
                  "isOnSubmit": true,
                  "isOnTouch": false,
                },
                "reValidateMode": Object {
                  "isReValidateOnBlur": false,
                  "isReValidateOnChange": true,
                },
                "readFormStateRef": Object {
                  "current": Object {
                    "constructor": true,
                    "dirtyFields": true,
                    "errors": true,
                    "isDirty": true,
                    "isSubmitSuccessful": true,
                    "isSubmitted": true,
                    "isSubmitting": true,
                    "isValid": true,
                    "isValidating": true,
                    "submitCount": true,
                    "touched": true,
                  },
                },
                "register": [Function],
                "removeFieldEventListener": [Function],
                "resetFieldArrayFunctionRef": Object {
                  "current": Object {},
                },
                "setValue": [Function],
                "shallowFieldsStateRef": Object {
                  "current": Object {},
                },
                "shouldUnregister": true,
                "trigger": [Function],
                "unregister": [Function],
                "updateFormState": [Function],
                "updateWatchedValue": [Function],
                "useWatchFieldsRef": Object {
                  "current": Object {},
                },
                "useWatchRenderFunctionsRef": Object {
                  "current": Object {},
                },
                "validFieldsRef": Object {
                  "current": Object {},
                },
                "validateResolver": undefined,
                "watchInternal": [Function],
              }
            }
            defaultValue={false}
            key=".1"
            name="consentRequired"
            render={[Function]}
          >
            <Switch
              aria-label=""
              id="kc-consent"
              isChecked={false}
              isDisabled={false}
              label="on"
              labelOff="off"
              onChange={[Function]}
            >
              <label
                className="pf-c-switch"
                data-ouia-component-id="OUIA-Generated-Switch-1"
                data-ouia-component-type="PF4/Switch"
                data-ouia-safe={true}
                htmlFor="kc-consent"
              >
                <input
                  aria-label=""
                  aria-labelledby="kc-consent-on"
                  checked={false}
                  className="pf-c-switch__input"
                  disabled={false}
                  id="kc-consent"
                  onChange={[Function]}
                  type="checkbox"
                />
                <span
                  className="pf-c-switch__toggle"
                />
                <span
                  aria-hidden="true"
                  className="pf-c-switch__label pf-m-on"
                  id="kc-consent-on"
                >
                  on
                </span>
                <span
                  aria-hidden="true"
                  className="pf-c-switch__label pf-m-off"
                  id="kc-consent-off"
                >
                  off
                </span>
              </label>
            </Switch>
          </Controller>
        </form>
      </Form>
    </FormAccess>
  </AccessContextProvider>
</Form>
`;
